
üìò JavaScript Execution & Call Stack (Interview Notes)

-----------------------------------------------------
 ‚úÖ 1. How JavaScript Runs
-----------------------------------------------------
- JS is a **single-threaded, synchronous language** (executes one thing at a time).
- It uses the **JavaScript Engine** (like V8 in Chrome, Node.js).
- Code runs inside **Execution Contexts**:
   1. Global Execution Context (GEC)
   2. Function Execution Context (FEC)

- The engine uses:
   üìç Call Stack ‚Üí keeps track of what function is running
   üìç Memory (Heap) ‚Üí stores variables & objects

-----------------------------------------------------
 ‚úÖ 2. Execution Context
-----------------------------------------------------
Whenever code runs:
1. Creation Phase:
   - Memory allocated for variables & functions
   - Variables: set to `undefined`
   - Functions: full definition stored

2. Execution Phase:
   - Code runs line by line
   - Variables assigned actual values

-----------------------------------------------------
 ‚úÖ 3. Call Stack
-----------------------------------------------------
- A stack (LIFO: last in, first out).
- Whenever a function is called ‚Üí new Execution Context pushed.
- When function ends ‚Üí popped from stack.
- Always starts with Global Execution Context (GEC).

-----------------------------------------------------
 ‚úÖ 4. Example: Call Stack in Action
-----------------------------------------------------
function first() {
  console.log("Inside First");
  second();
}

function second() {
  console.log("Inside Second");
  third();
}

function third() {
  console.log("Inside Third");
}

first();

Call Stack Flow:
1. GEC created ‚Üí pushed
2. first() called ‚Üí FEC(first) pushed
3. console.log ‚Üí executed
4. second() called ‚Üí FEC(second) pushed
5. console.log ‚Üí executed
6. third() called ‚Üí FEC(third) pushed
7. console.log ‚Üí executed
8. FEC(third) popped
9. FEC(second) popped
10. FEC(first) popped
11. GEC removed after program ends

-----------------------------------------------------
 ‚úÖ 5. Visualization of Call Stack
-----------------------------------------------------
Initially:
   [ GEC ]

After first():
   [ GEC, first() ]

After second():
   [ GEC, first(), second() ]

After third():
   [ GEC, first(), second(), third() ]

After finishing third():
   [ GEC, first(), second() ]

Finally:
   [ GEC ] ‚Üí removed ‚Üí stack empty

-----------------------------------------------------
 ‚úÖ 6. Interview Quick Notes
-----------------------------------------------------
üëâ JS runs in **Execution Contexts**
   - Global Context (created once)
   - Function Context (created every time function is called)

üëâ Call Stack:
   - Keeps track of function calls (LIFO)
   - New function ‚Üí pushed
   - Function finished ‚Üí popped

üëâ Important:
   - JS is **single-threaded**
   - Long tasks block the call stack (solution: async, event loop)
   - `this` and scope are bound within execution context
